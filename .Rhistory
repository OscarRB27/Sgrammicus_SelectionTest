FDR=0.01) #False discovery rate
#Review the number of outliers detected as candidates under selection
Sg.all.res$nb_outliers #Very large number!
#All sites
#Estimate the empirical cumulative distribution function (ECDF) for output
Likelihood_Function_A<-ecdf(Sg.all$alpha)
head(Likelihood_Function_F)
head(Likelihood_Function_A)
#Function evaluation for output
#Run function
Eval_A<-Likelihood_Function_A(Sg.all[,"alpha"])
#Check results
head(Eval_A)
#Calculate the p-value, as 1 - the values of the previous results
Likelihood_Pval_A<-1-Eval_A
#Since many comparisons are made, it is necessary to correct the p-values, which make with the function p.adjust
Likelihood_FDR_A<-p.adjust(Likelihood_Pval_A,"BH") #Correction method used, known as False Discovery Rate
#All sites
#Copy original data
Sg.All.res<-Sg.all
#Add p-values
Sg.All.res$pval<-Likelihood_Pval_A
Sg.All.res$pval.adjust<-Likelihood_FDR_A
head(Sg.All.res)
#Eexamine which ones are significant now
sum(Sg.All.res$pval.adjust<=0.001)
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
ggtitle("Forest sites")+ #Put title
theme(plot.title=element_text(hjust=0.5), #Center title
axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.742,y=0.09,label="L.6319",size=3)) #Add candidate SNP name
library(ggplot2)
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
ggtitle("Forest sites")+ #Put title
theme(plot.title=element_text(hjust=0.5), #Center title
axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.742,y=0.09,label="L.6319",size=3)) #Add candidate SNP name
write.table(Likelihood_FDR_A,file="outliers.BS",row.names=F,col.names=T,quote=F)
write.table(Sg.All.res$pval.adjust,file="outliers.BS",row.names=F,col.names=T,quote=F)
write.table(Sg.All.res$pval.adjust,file="outliersBS.txt",row.names=F,col.names=T,quote=F)
#Loci info
Sg.loci<-read.table("Data/Loci_Info/Loci_info.txt",sep="\t",header=T)
ggsave("Analysis/BayeScan/Figures/Sg.All.out.pdf",dpi=300,limitsize=TRUE,
width=10,height=7)
Sg.loci[Sg.all.res$outliers,]
#Vamos a identificar los loci outliers
outliers.BS <- Loci_info[Sg.All.res$pval.adjust,]
Sg.loci[Sg.All.res$pval.adjust,]
#All sites
#Analysis of agricultural sites using plot_bayescan function
Sg.all.res<-plot_bayescan(Sg.all, #Data
FDR=0.01) #False discovery rate
Sg.All.res
head(Sg.All.res)
#Vamos a identificar los loci outliers
Sg.loci[Sg.All.res$pval.adjust,]
#Vamos a identificar los loci outliers
Sg.loci[Sg.All.res$pval.adjust<=0.001,]
#Eexamine which ones are significant now
Sg.outliers.bs<-Sg.loci[Sg.All.res$pval.adjust<=0.001,]
Sg.outliers.bs
write.table(Sg.outliers.bs,file="Analysis/BayeScan/Results/Sg.outliers.BS.txt",row.names=F,col.names=T,quote=F)
#Eexamine which ones are significant now
Sg.outliers.bs<-Sg.loci[Sg.All.res$pval.adjust<=0.001,]
Sg.outliers.bs
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
ggtitle("Forest sites")+ #Put title
theme(plot.title=element_text(hjust=0.5), #Center title
axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.742,y=0.09,label="L126304:P9",size=3)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
ggtitle("Forest sites")+ #Put title
theme(plot.title=element_text(hjust=0.5), #Center title
axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.742,y=0.6,label="L126304:P9",size=3)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
ggtitle("Forest sites")+ #Put title
theme(plot.title=element_text(hjust=0.5), #Center title
axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.6,y=0.6,label="L126304:P9",size=3)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
ggtitle("Forest sites")+ #Put title
theme(plot.title=element_text(hjust=0.5), #Center title
axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.48,y=0.6,label="L126304:P9",size=2.5)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
ggtitle("Forest sites")+ #Put title
theme(plot.title=element_text(hjust=0.5), #Center title
axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.6,y=0.48,label="L126304:P9",size=2.5)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
ggtitle("Forest sites")+ #Put title
theme(plot.title=element_text(hjust=0.5), #Center title
axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.57,y=0.48,label="L126304:P9",size=2.5)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
ggtitle("Forest sites")+ #Put title
theme(plot.title=element_text(hjust=0.5), #Center title
axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.57,y=0.47,label="L126304:P9",size=2.5)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
ggtitle("Forest sites")+ #Put title
theme(plot.title=element_text(hjust=0.5), #Center title
axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.57,y=0.46,label="L126304:P9",size=2.5)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
axis.title.y=element_text(size=13), #y-axis title size
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
theme(axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.57,y=0.46,label="L126304:P9",size=2.5)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=bayescan_number, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
theme(axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.57,y=0.46,label="L126304:P9",size=2.5)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=bayescan_number, y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
theme(axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.57,y=0.46,label="L3203",size=2.5)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst,y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
theme(axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.57,y=0.46,label="L3203",size=2.5)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst,y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
theme(axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.57,y=0.45,label="L3203",size=2.5)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst,y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
theme(axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.57,y=0.42,label="L3203",size=2.5)) #Add candidate SNP name
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst,y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
theme(axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.57,y=0.43,label="L3203",size=2.5)) #Add candidate SNP name
ggsave("Analysis/BayeScan/Figures/Sg.All.out.pdf",dpi=300,limitsize=TRUE,
width=10,height=7)
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst,y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
theme(axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.57,y=0.43,label="L3203",size=4)) #Add candidate SNP name
ggsave("Analysis/BayeScan/Figures/Sg.All.out.pdf",dpi=300,limitsize=TRUE,
width=10,height=7)
#All sites
(Sg.All.out<-ggplot(Sg.All.res,aes(x=fst,y=alpha))+ #Axis definition
geom_point(size=2,alpha=0.5, #Geometry definition
aes(colour=pval.adjust<=0.001))+ #Points color adjusted to p-val.adjust
scale_color_manual(values=c("black","red"))+ #Define point colors
theme_bw()+ #Canvas definition
ylab("Alpha")+ #y-lab name
xlab("Fst")+ #x-lab name
labs(color="Adjusted p-values")+ #Rename legend title
theme(axis.title.y=element_text(size=13), #y-axis title size
axis.title.x=element_text(size=13))+ #x-axis title size
annotate("text",x=0.57,y=0.43,label="L3203",size=3.5)) #Add candidate SNP name
ggsave("Analysis/BayeScan/Figures/Sg.All.out.pdf",dpi=300,limitsize=TRUE,
width=10,height=7)
setwd("~/Documents/Doctorado/Cuarto_semestre/EvolMolAdap/Sgrammicus_SelectionTest")
#########Cargamos paquetes
library(vcfR)
library(adegenet)
#Cargamos el archivo vcf
SN.vcf <- read.vcfR("Data/Loci_Data/Sg_Pols2M_7000snps.vcf")
#sacamos la info de los loci
loci_info <-SN.vcf@fix
write.table(loci_info,file="Data/Baypass/Loci_info.txt",sep=",",col.names=T,row.names=F,quote=FALSE)
#Lo pasamos a objeto genind
SN.ind <- vcfR2genind(SN.vcf)
SN.ind
#Cargamos la info de los individuos y especificamos su respectiva población
Ind_info <- read.table("Data/Pop_Info/Pops.txt")
#Cargamos la info de los individuos y especificamos su respectiva población
Ind_info <- read.table("Data/Pop_Info/Pops.txt")
pop(SN.ind)<- Ind_info$V2
#Cargamos la info de los individuos y especificamos su respectiva población
Ind_info <- read.table("Data/Pop_Info/Pops.txt")
Ind_info
pop(SN.ind)<- Ind_info$V2
#Separamos por pop
SN.ind.bypop <-seppop(SN.ind)
SN.ind.bypop
Ind_info
#Cargamos la info de los individuos y especificamos su respectiva población
Ind_info <- read.table("Data/Pop_Info/Pops.txt")
pop(SN.ind)<- Ind_info$loc
pop(SN.ind)
SN.ind
#Lo pasamos a objeto genind
SN.ind <- vcfR2genind(SN.vcf)
#Cargamos la info de los individuos y especificamos su respectiva población
Ind_info <- read.table("Data/Pop_Info/Pops.txt")
Ind_info
#Cargamos la info de los individuos y especificamos su respectiva población
Ind_info <- read.table("Data/Pop_Info/Pops.txt",header=T)
Ind_info
pop(SN.ind)<- Ind_info$loc
pop(SN.ind)
#Separamos por pop
SN.ind.bypop <-seppop(SN.ind)
#Sacamos la pop, por ejemplo la "E"
Pop_P5For<-as.data.frame(t(SN.ind.bypop$P5For@tab))
Pop_P5For_Allele.1 <- P5For[grep(rownames(P5For),pattern=".1$"),]
##Separamos por alelo, en este caso adegenet los nombra como "locus1.0" y "locus1.1"
Pop_P5For_Allele.0 <- P5For[grep(rownames(P5For),pattern=".0$"),]
Pop_P5For
##Separamos por alelo, en este caso adegenet los nombra como "locus1.0" y "locus1.1"
Pop_P5For_Allele.0 <- Pop_P5For[grep(rownames(Pop_P5For),pattern=".0$"),]
Pop_P5For_Allele.1 <- Pop_P5For[grep(rownames(Pop_P5For),pattern=".1$"),]
#Los juntamos haciendo la suma de los que hay por población
Pop_P5For.baypass <-cbind(rowSums(Pop_P5For_Allele.0,na.rm=T),rowSums(Pop_P5For_Allele.1,na.rm=T))
Pop_P5For.baypass
pop(SN.ind)
##Igualito para todos, digamos ahora la pop "A"
#######################################################################
#Sacamos la pop "A"
Pop_P5Agr<-as.data.frame(t(SN.ind.bypop$P5Agr@tab))
##Separamos por alelo, en este caso adegenet los nombra como "locus1.0" y "locus1.1"
Pop_P5Agr_Allele.0 <- Pop_P5Agr[grep(rownames(Pop_P5Agr),pattern=".0$"),]
Pop_P5Agr_Allele.1 <- Pop_P5Agr[grep(rownames(Pop_P5Agr),pattern=".1$"),]
#Los juntamos haciendo la suma de los que hay por población
Pop_A.baypass <-cbind(rowSums(Pop_P5Agr_Allele.0,na.rm=T),rowSums(Pop_P5Agr_Allele.1,na.rm=T))
#Los juntamos haciendo la suma de los que hay por población
Pop_P5Agr.baypass <-cbind(rowSums(Pop_P5Agr_Allele.0,na.rm=T),rowSums(Pop_P5Agr_Allele.1,na.rm=T))
Pop_P5Agr.baypass
#Sacamos la pop "A"
Pop_P6For<-as.data.frame(t(SN.ind.bypop$P6For@tab))
#Sacamos la pop "A"
Pop_P6For<-as.data.frame(t(SN.ind.bypop$P6For@tab))
##Separamos por alelo, en este caso adegenet los nombra como "locus1.0" y "locus1.1"
Pop_P6For_Allele.0 <- Pop_P6For[grep(rownames(Pop_P6For),pattern=".0$"),]
Pop_P6For_Allele.1 <- Pop_P6For[grep(rownames(Pop_P6For),pattern=".1$"),]
#Los juntamos haciendo la suma de los que hay por población
Pop_P6For.baypass <-cbind(rowSums(Pop_P6For_Allele.0,na.rm=T),rowSums(Pop_P6For_Allele.1,na.rm=T))
Pop_P6For.baypass
#Sacamos la pop "A"
Pop_P6Agr<-as.data.frame(t(SN.ind.bypop$P6Agr@tab))
##Separamos por alelo, en este caso adegenet los nombra como "locus1.0" y "locus1.1"
Pop_P6Agr_Allele.0 <- Pop_P6Agr[grep(rownames(Pop_P6Agr),pattern=".0$"),]
Pop_P6AgrAllele.1 <- Pop_P6Agr[grep(rownames(Pop_P6Agr),pattern=".1$"),]
#Los juntamos haciendo la suma de los que hay por población
Pop_P6Agr.baypass <-cbind(rowSums(Pop_P6Agr_Allele.0,na.rm=T),rowSums(Pop_P6AgrAllele.1,na.rm=T))
####################################################################
SN_formato_all.baypass <-cbind(Pop_P5For.baypass,Pop_P5Agr.baypass,Pop_P6For.baypass,Pop_P6Agr.baypass)
SN_formato_all.baypass
#Escribimos el formato
write.table(SN_formato_all.baypass,file="Data/Baypass/SN_baypass.input",row.names=F,col.names=F,sep=" ",quote=FALSE)
#Es útil tener la lista numerada de los loci,para saber cual es cual cuando tengas resultados
write.table(rownames(SN_formato_all.baypass),file="SN_baypass.loci",row.names=T,col.names=F,sep=" ",quote=FALSE)
#Es útil tener la lista numerada de los loci,para saber cual es cual cuando tengas resultados
write.table(rownames(SN_formato_all.baypass),file="Data/Baypass/SN_baypass.loci",row.names=T,col.names=F,sep=" ",quote=FALSE)
###Nota que el archivo de salida no tiene etiquetas, por eso debes de ser muy cuidadosa con el orden cuando obtengas tu formato###
#################################################################
SN_formato_for.baypass <-cbind(Pop_P5For.baypass,Pop_P6For.baypass)
SN_formato_for.baypass
#Escribimos el formato
write.table(SN_formato_for.baypass,file="Data/Baypass/SN_baypass_for.input",row.names=F,col.names=F,sep=" ",quote=FALSE)
#Es útil tener la lista numerada de los loci,para saber cual es cual cuando tengas resultados
write.table(rownames(SN_formato_for.baypass),file="Data/Baypass/SN_baypass_for.loci",row.names=T,col.names=F,sep=" ",quote=FALSE)
#################################################################
SN_formato_agr.baypass <-cbind(Pop_P5Agr.baypass,Pop_P6Agr.baypass)
#Escribimos el formato
write.table(SN_formato_agr.baypass,file="Data/Baypass/SN_baypass_agr.input",row.names=F,col.names=F,sep=" ",quote=FALSE)
#Es útil tener la lista numerada de los loci,para saber cual es cual cuando tengas resultados
write.table(rownames(SN_formato_agr.baypass),file="Data/Baypass/SN_baypass_agr.loci",row.names=T,col.names=F,sep=" ",quote=FALSE)
#SNPs database
Sg.data<-read.vcfR("Data/Loci_Data/Sg_Pols2M_7000snps.vcf")
#The info of the loci is obtained
Sg.loci.info<-Sg.data@fix
#Save to a .txt file
write.table(Sg.loci.info,file="Data/Baypass/Sg.Loci_info.txt",sep=",",col.names=T,row.names=F,quote=FALSE)
#Transform SNPs database to genind object
Sg.gen<-vcfR2genind(Sg.data)
#ID and location database information
Sg.data<-read.table("Data/Pop_Info/Pops.txt",header=T)
#Specify your respective site
pop(Sg.gen)<-Sg.data$loc
pop(Sg.gen)
#The database is separated by sampling site
Sg.ind.bypop<-seppop(Sg.gen)
Sg.ind.bypop
library(vcfR)
library(adegenet)
#SNPs database
Sg.data<-read.vcfR("Data/Loci_Data/Sg_Pols2M_7000snps.vcf")
#The info of the loci is obtained
Sg.loci.info<-Sg.data@fix
#Save to a .txt file
write.table(Sg.loci.info,file="Data/Baypass/Sg.Loci_info.txt",sep=",",col.names=T,row.names=F,quote=FALSE)
#Transform SNPs database to genind object
Sg.gen<-vcfR2genind(Sg.data)
#ID and location database information
Sg.data<-read.table("Data/Pop_Info/Pops.txt",header=T)
#Specify your respective location
pop(Sg.gen)<-Sg.data$loc
#The database is separated by sampling site
Sg.ind.bypop<-seppop(Sg.gen)
#P5For site is extracted as database
Pop_P5For<-as.data.frame(t(Sg.ind.bypop$P5For@tab))
#Separate by allele, in this case adegenet names them as "locus1.0" and "locus1.1"
Pop_P5For_Allele.0 <- Pop_P5For[grep(rownames(Pop_P5For),pattern=".0$"),]
Pop_P5For_Allele.1 <- Pop_P5For[grep(rownames(Pop_P5For),pattern=".1$"),]
#The alleles are put together by adding the ones that exist per population and NA is obtained
Pop_P5For.baypass<-cbind(rowSums(Pop_P5For_Allele.0,na.rm=T),rowSums(Pop_P5For_Allele.1,na.rm=T))
#P5Agr site is extracted as database
Pop_P5Agr<-as.data.frame(t(Sg.ind.bypop$P5Agr@tab))
#Separate by allele, in this case adegenet names them as "locus1.0" and "locus1.1"
Pop_P5Agr_Allele.0 <- Pop_P5Agr[grep(rownames(Pop_P5Agr),pattern=".0$"),]
Pop_P5Agr_Allele.1 <- Pop_P5Agr[grep(rownames(Pop_P5Agr),pattern=".1$"),]
#The alleles are put together by adding the ones that exist per population and NA is obtained
Pop_P5Agr.baypass <-cbind(rowSums(Pop_P5Agr_Allele.0,na.rm=T),rowSums(Pop_P5Agr_Allele.1,na.rm=T))
#P6For site is extracted as database
Pop_P6For<-as.data.frame(t(Sg.ind.bypop$P6For@tab))
#Separate by allele, in this case adegenet names them as "locus1.0" and "locus1.1"
Pop_P6For_Allele.0 <- Pop_P6For[grep(rownames(Pop_P6For),pattern=".0$"),]
Pop_P6For_Allele.1 <- Pop_P6For[grep(rownames(Pop_P6For),pattern=".1$"),]
#The alleles are put together by adding the ones that exist per population and NA is obtained
Pop_P6For.baypass <-cbind(rowSums(Pop_P6For_Allele.0,na.rm=T),rowSums(Pop_P6For_Allele.1,na.rm=T))
#P6Agr site is extracted as database
Pop_P6Agr<-as.data.frame(t(Sg.ind.bypop$P6Agr@tab))
#Separate by allele, in this case adegenet names them as "locus1.0" and "locus1.1"
Pop_P6Agr_Allele.0 <- Pop_P6Agr[grep(rownames(Pop_P6Agr),pattern=".0$"),]
Pop_P6AgrAllele.1 <- Pop_P6Agr[grep(rownames(Pop_P6Agr),pattern=".1$"),]
#The alleles are put together by adding the ones that exist per population and NA is obtained
Pop_P6Agr.baypass <-cbind(rowSums(Pop_P6Agr_Allele.0,na.rm=T),rowSums(Pop_P6AgrAllele.1,na.rm=T))
#Combination of databases from all sites
SN_formato_all.baypass <-cbind(Pop_P5For.baypass,Pop_P5Agr.baypass,Pop_P6For.baypass,Pop_P6Agr.baypass)
#Input for Baypass is written and saved
write.table(SN_formato_all.baypass,file="Data/Baypass/SN_baypass_all.input",row.names=F,col.names=F,sep=" ",quote=FALSE)
#It is useful to have the numbered list of the loci, to know which is which when you have results. The format is written and saved
write.table(rownames(SN_formato_all.baypass),file="Data/Baypass/SN_baypass_all.loci",row.names=T,col.names=F,sep=" ",quote=FALSE)
#Combination of databases from forest sites
SN_formato_for.baypass <-cbind(Pop_P5For.baypass,Pop_P6For.baypass)
#Input for Baypass is written and saved
write.table(SN_formato_for.baypass,file="Data/Baypass/SN_baypass_for.input",row.names=F,col.names=F,sep=" ",quote=FALSE)
#It is useful to have the numbered list of the loci, to know which is which when you have results. The format is written and saved
write.table(rownames(SN_formato_for.baypass),file="Data/Baypass/SN_baypass_for.loci",row.names=T,col.names=F,sep=" ",quote=FALSE)
#Combination of databases from agricultural sites
SN_formato_agr.baypass <-cbind(Pop_P5Agr.baypass,Pop_P6Agr.baypass)
#Input for Baypass is written and saved
write.table(SN_formato_agr.baypass,file="Data/Baypass/SN_baypass_agr.input",row.names=F,col.names=F,sep=" ",quote=FALSE)
#It is useful to have the numbered list of the loci, to know which is which when you have results. The format is written and saved
write.table(rownames(SN_formato_agr.baypass),file="Data/Baypass/SN_baypass_agr.loci",row.names=T,col.names=F,sep=" ",quote=FALSE)
#The info of the loci is obtained
Sg_loci.info<-Sg.data@fix
#The info of the loci is obtained
Sg.loci.info<-Sg.data@fix
#SNPs database
Sg.data<-read.vcfR("Data/Loci_Data/Sg_Pols2M_7000snps.vcf")
#The info of the loci is obtained
Sg_loci.info<-Sg.data@fix
