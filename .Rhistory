(Sg.lancov<-ggplot(data=Sg.cov, #Database
aes(x=Sites,y=Prop_Cov,fill=Coverage))+ #Axis definition
geom_bar(stat="identity",color="black")+ #Geometry definition
facet_wrap(~Polygon,scale="free_x")+ #Split plots
ylab("Fraction of land cover")+ #y-axis legend
scale_fill_manual(values=c("aquamarine3","darkgoldenrod","darkslategray","azure4"))+ #Colors definition
theme_bw()+ #Canvas definition
labs(fill="Land cover")+ #Rename legend
scale_x_discrete(labels=c("Agr","For"))+ #Rename groups of x-axis
theme(axis.title.x=element_blank(), #Remove title of x-axis
strip.text.x=element_text(size=10,color="black"), #Size and color of strip.text.x
axis.text.x=element_text(size=10,color="black"), #Size and color of axis.text.x
axis.text.y=element_text(size=9,color="black"))) #Size and color of axis.text.y
#Enviromental variables database
Sg.env<-read.table("Data/Env_Data/Env_Data.txt",header=T)
#Transform to factor some variables
Sg.env$ID<-factor(Sg.env$ID)
Sg.env$Site<-factor(Sg.env$Site)
Sg.env$Polygon<-factor(Sg.env$Polygon)
Sg.env$Site_ID<-factor(Sg.env$Site_ID)
#Explore data
str(Sg.env)
summary(Sg.env)
#Landscape cover database
Sg.cov<-as.data.frame(read.table("Data/Env_Data/Cov_Data.txt",header=T))
#Transform to factor some variables
Sg.cov$Sites<-factor(Sg.cov$Sites)
Sg.cov$Coverage<-factor(Sg.cov$Coverage,labels=c("Agriculture","Bare soil","Forest","Roads"))
#Explore data
str(Sg.cov)
summary(Sg.env)
#Explore data
str(Sg.cov)
summary(Sg.env)
(Sg.lancov<-ggplot(data=Sg.cov, #Database
aes(x=Sites,y=Prop_Cov,fill=Coverage))+ #Axis definition
geom_bar(stat="identity",color="black")+ #Geometry definition
facet_wrap(~Polygon,scale="free_x")+ #Split plots
ylab("Fraction of land cover")+ #y-axis legend
scale_fill_manual(values=c("aquamarine3","darkgoldenrod","darkslategray","azure4"))+ #Colors definition
theme_bw()+ #Canvas definition
labs(fill="Land cover")+ #Rename legend
scale_x_discrete(labels=c("Agr","For"))+ #Rename groups of x-axis
theme(axis.title.x=element_blank(), #Remove title of x-axis
strip.text.x=element_text(size=10,color="black"), #Size and color of strip.text.x
axis.text.x=element_text(size=10,color="black"), #Size and color of axis.text.x
axis.text.y=element_text(size=9,color="black"))) #Size and color of axis.text.y
ggsave("Analysis/Env_Vars/Figures/Sg.lancov.pdf",dpi=300,limitsize=TRUE,
width=10,height=7)
#Extract samples of P6For site within Polygon 6
P6For<-filter(Sg.env,Site_ID == "P6For")
#Extract samples of P6Agr site within Polygon 6
P6Agr<-filter(Sg.env,Site_ID == "P6Agr")
#Extract samples of P5For site within Polygon 5
P5For<-filter(Sg.env,Site_ID == "P5For")
#Extract samples of P5Agr site within Polygon 5
P5Agr<-filter(Sg.env,Site_ID == "P5Agr")
#Extract samples from the P6For and P6Agr sites of Polygon 6 to perform differentiation tests
P6<-filter(Sg.env,Polygon == "P6")
#Extract samples from the P5For and P5Agr sites of Polygon 6 to perform differentiation tests
P5<-filter(Sg.env,Polygon == "P5")
#Plot with St between sites within polygons
(Sg.St.plot<-ggplot(data=Sg.env, #Database
aes(x=Site_ID,y=St))+ #Axis definition
geom_boxplot(aes(fill=Site))+ #Geometry definition
geom_jitter(aes(fill=Site),width=0.3)+ #Geometry definition
facet_wrap(~Polygon,scale="free_x")+ #Split plots
ylab("Soil temperature (°C)")+ #y-axis legend
scale_fill_brewer(palette="Dark2")+ #Colors definition
scale_x_discrete(labels=c("Agr","For"))+ #Rename groups of x-axis
theme_bw()+ #Canvas definition
theme(legend.position="none",axis.title.x=element_blank(), #Remove title of x-axis
strip.text.x=element_text(size=10,color="black"), #Size and color of strip.text.x
axis.text.x=element_text(size=10,color="black"), #Size and color of axis.text.x
axis.text.y=element_text(size=9,color="black"))) #Size and color of axis.text.y
ggsave("Analysis/Env_Vars/Figures/Sg.St.plot.pdf",dpi=300,limitsize=TRUE,
width=10,height=7)
#Lillie test used to n>=50
lillie.test(Sg.env$St)
shapiro.test(P6For$St) #(n<50)
shapiro.test(P6Agr$St) #(n<50)
shapiro.test(P5For$St) #(n<50)
#P5Agr
shapiro.test(P5Agr$St) #(n<50)
wilcox.test(data=Sg.env,St~Polygon,exact=F)
wilcox.test(data=P6,St~Site,exact=F)
as.data.frame(P6For)
P6Agr
#Extract samples of P6For site within Polygon 6
P6For<-as.data.frame(filter(Sg.env,Site_ID == "P6For"))
P6For
#Extract samples of P6For site within Polygon 6
P6For<-as.data.frame(filter(Sg.env,Site_ID == "P6For"))
#Extract samples of P6Agr site within Polygon 6
P6Agr<-as.data.frame(filter(Sg.env,Site_ID == "P6Agr"))
#Extract samples of P5For site within Polygon 5
P5For<-as.data.frame(filter(Sg.env,Site_ID == "P5For"))
#Extract samples of P5Agr site within Polygon 5
P5Agr<-as.data.frame(filter(Sg.env,Site_ID == "P5Agr"))
#Extract samples of P6For site within Polygon 6
P6For<-filter(Sg.env,Site_ID == "P6For")
#Extract samples of P6Agr site within Polygon 6
P6Agr<-filter(Sg.env,Site_ID == "P6Agr")
#Extract samples of P5For site within Polygon 5
P5For<-filter(Sg.env,Site_ID == "P5For")
#Extract samples of P5Agr site within Polygon 5
P5Agr<-filter(Sg.env,Site_ID == "P5Agr")
P6For.txt
P6For
write.table(Env_all,file="Data/Env_Data/P6For.txt",row.names=F,col.names=T,quote=F,sep="\t")
write.table(P6For,file="Data/Env_Data/P6For.txt",row.names=F,col.names=T,quote=F,sep="\t")
write.table(P6For,file="Data/Env_Data/P6Agr.txt",row.names=F,col.names=T,quote=F,sep="\t")
write.table(P6For,file="Data/Env_Data/P5Agr.txt",row.names=F,col.names=T,quote=F,sep="\t")
write.table(P6For,file="Data/Env_Data/P6For.txt",row.names=F,col.names=T,quote=F,sep="\t")
write.table(P5For,file="Data/Env_Data/P5For.txt",row.names=F,col.names=T,quote=F,sep="\t")
write.table(P6For,file="Data/Env_Data/P6For.txt",row.names=F,col.names=T,quote=F,sep="\t")
write.table(P6Agr,file="Data/Env_Data/P6Agr.txt",row.names=F,col.names=T,quote=F,sep="\t")
write.table(P5Agr,file="Data/Env_Data/P6Agr.txt",row.names=F,col.names=T,quote=F,sep="\t")
write.table(P5Agr,file="Data/Env_Data/P5Agr.txt",row.names=F,col.names=T,quote=F,sep="\t")
write.table(P6Agr,file="Data/Env_Data/P6Agr.txt",row.names=F,col.names=T,quote=F,sep="\t")
write.table(P6,file="Data/Env_Data/P6.txt",row.names=F,col.names=T,quote=F,sep="\t")
write.table(P5,file="Data/Env_Data/P5.txt",row.names=F,col.names=T,quote=F,sep="\t")
P5<-read.table("Data/Env_Data/P5.txt",header=T)
#Transform to factor some variables
P5$ID<-factor(P5$ID)
P5$Site<-factor(P5$Site)
P5$Polygon<-factor(P5$Polygon)
P5$Site_ID<-factor(P5$Site_ID)
P6<-read.table("Data/Env_Data/P6.txt",header=T)
#Transform to factor some variables
P6$ID<-factor(P6$ID)
P6$Site<-factor(P6$Site)
P6$Polygon<-factor(P6$Polygon)
P6$Site_ID<-factor(P6$Site_ID)
P6Agr<-read.table("Data/Env_Data/P6Agr.txt",header=T)
#Transform to factor some variables
P6Agr$ID<-factor(P6Agr$ID)
P6Agr$Site<-factor(P6Agr$Site)
P6Agr$Polygon<-factor(P6Agr$Polygon)
P6Agr$Site_ID<-factor(P6Agr$Site_ID)
P6<-read.table("Data/Env_Data/P6.txt",header=T)
P5<-read.table("Data/Env_Data/P5.txt",header=T)
P6For<-read.table("Data/Env_Data/P6For.txt",header=T)
P6Agr<-read.table("Data/Env_Data/P6Agr.txt",header=T)
P5For<-read.table("Data/Env_Data/P5For.txt",header=T)
P5Agr<-read.table("Data/Env_Data/P5Agr.txt",header=T)
La fragmentación perdida de hábitat a gran escala debido a las actividades humanas, ha provocado grandes desafios a la vida silvestre. En general, diversas especies en mayor medida se enfrentan a entornos extremos y novedosos que plantean los paisajes perturbados.
#Plot with St between sites within polygons
(Sg.Bt.plot<-ggplot(data=Sg.env, #Database
aes(x=Site_ID,y=MSI))+ #Axis definition
geom_boxplot(aes(fill=Site))+ #Geometry definition
geom_jitter(aes(fill=Site),width=0.3)+ #Geometry definition
facet_wrap(~Polygon,scale="free_x")+ #Split plots
ylab("Body temperature (°C)")+ #y-axis legend
scale_fill_brewer(palette="Dark2")+ #Colors definition
scale_x_discrete(labels=c("Agr","For"))+ #Rename groups of x-axis
theme_bw()+ #Canvas definition
theme(legend.position="none",axis.title.x=element_blank(), #Remove title of x-axis
strip.text.x=element_text(size=10,color="black"), #Size and color of strip.text.x
axis.text.x=element_text(size=10,color="black"), #Size and color of axis.text.x
axis.text.y=element_text(size=9,color="black"))) #Size and color of axis.text.y
#Plot with St between sites within polygons
(Sg.Bt.plot<-ggplot(data=Sg.env, #Database
aes(x=Site_ID,y=Bt))+ #Axis definition
geom_boxplot(aes(fill=Site))+ #Geometry definition
geom_jitter(aes(fill=Site),width=0.3)+ #Geometry definition
facet_wrap(~Polygon,scale="free_x")+ #Split plots
ylab("Body temperature (°C)")+ #y-axis legend
scale_fill_brewer(palette="Dark2")+ #Colors definition
scale_x_discrete(labels=c("Agr","For"))+ #Rename groups of x-axis
theme_bw()+ #Canvas definition
theme(legend.position="none",axis.title.x=element_blank(), #Remove title of x-axis
strip.text.x=element_text(size=10,color="black"), #Size and color of strip.text.x
axis.text.x=element_text(size=10,color="black"), #Size and color of axis.text.x
axis.text.y=element_text(size=9,color="black"))) #Size and color of axis.text.y
#Plot with St between sites within polygons
(Sg.MSI.plot<-ggplot(data=Sg.env, #Database
aes(x=Site_ID,y=MSI))+ #Axis definition
geom_boxplot(aes(fill=Site))+ #Geometry definition
geom_jitter(aes(fill=Site),width=0.3)+ #Geometry definition
facet_wrap(~Polygon,scale="free_x")+ #Split plots
ylab("Moisture Stress Index (m)")+ #y-axis legend
scale_fill_brewer(palette="Dark2")+ #Colors definition
scale_x_discrete(labels=c("Agr","For"))+ #Rename groups of x-axis
theme_bw()+ #Canvas definition
theme(legend.position="none",axis.title.x=element_blank(), #Remove title of x-axis
strip.text.x=element_text(size=10,color="black"), #Size and color of strip.text.x
axis.text.x=element_text(size=10,color="black"), #Size and color of axis.text.x
axis.text.y=element_text(size=9,color="black"))) #Size and color of axis.text.y
#Lillie test used to n>=50
lillie.test(Sg.env$MSI)
shapiro.test(P6For$MSI) #(n<50)
shapiro.test(P6Agr$MSI) #(n<50)
shapiro.test(P5For$MSI) #(n<50)
#P5Agr
shapiro.test(P5Agr$MSI) #(n<50)
#Search for significant differences between sites within polygon 6
wilcox.test(data=Sg.env,MSI~Polygon,exact=F)
wilcox.test(data=P6,MSI~Site,exact=F)
wilcox.test(data=P5,MSI~Site,exact=F)
library(vcfR)
library(adegenet)
library(reshape2)
library(gridExtra)
library(ggplot2)
library(ggpubr)
#ID and location database information
Sg.data<-read.table("Data/Pop_Info/Pops.txt",sep="\t",header=T)
setwd("~/Documents/Doctorado/Cuarto_semestre/EvolMolAdap/Sgrammicus_SelectionTest")
#ID and location database information
Sg.data<-read.table("Data/Pop_Info/Pops.txt",sep="\t",header=T)
#ID and location database information
Sg.data<-read.table("Data/Pop_Info/Pops.txt",sep="\t",header=T)
#ID and location database information
Sg.data<-read.table("Data/Pop_Info/Pops.txt",sep="\t",header=T)
#SNPs database
Sg.vcf<-read.vcfR("Data/Raw_Data/Sg_Pols2M_7000snps.vcf")
#SNPs database
Sg.vcf<-read.vcfR("Data/Loci_Data/Sg_Pols2M_7000snps.vcf")
#Transform SNPs database to genind object
Sg.gen<-vcfR2genind(Sg.vcf)
#Definition of localities as populations (for now)
pop(Sg.gen)<-Sg.data$loc
#CV database
(Sg.CV<-read.table("Analysis/Admixture/Results/CV_values"))
maxK<-10 #The number of K to be tested is established
myMat<-matrix(nrow=10,ncol=maxK) #Create the matrix establishing the number of rows and columns
colnames(myMat)<-1:ncol(myMat) #Give names to the columns depending on the number of each K
for(i in 1:nrow(myMat)){ #Enumerate each row
#find.clusters parameters
grp<-find.clusters(Sg.gen, #Data base
n.pca=35, #Number of axes retained in the Principal Component Analysis (PCA) step
choose.n.clust=FALSE, #The number of clusters shouldn't be chosen by the user
max.n.clust=maxK) #Maximum number of clusters to be tried, in this case is 10
myMat[i,]<-grp$Kstat #Integrate the BIC statistics values of each K to the matrix
}
my_df<-melt(myMat) #Transform matrix to an object molten data frame
colnames(my_df)[1:3]<-c("Group", "K", "BIC") #Name columns
my_df$K<-as.factor(my_df$K) #Transform K to factor
(Sg.K_BIC<-ggplot(my_df,aes(x=K, y=BIC))+ #Axis definition
geom_boxplot(aes(colour = K))+ #Geometry definition
theme_bw()+ #Canvas definition
xlab("Number of groups (K)")+ #x-axis legend
theme(legend.position="none")) #Hide legend box
#find.clusters parameters
grp<-find.clusters(Sg.gen, #Data base
n.pca=40, #Number of axes retained in the Principal Component Analysis (PCA) step
choose.n.clust=FALSE, #The number of clusters shouldn't be chosen by the user
max.n.clust=maxK) #Maximum number of clusters to be tried, in this case is 10
myMat<-matrix(nrow=10,ncol=maxK) #Create the matrix establishing the number of rows and columns
colnames(myMat)<-1:ncol(myMat) #Give names to the columns depending on the number of each K
for(i in 1:nrow(myMat)){ #Enumerate each row
#find.clusters parameters
grp<-find.clusters(Sg.gen, #Data base
n.pca=40, #Number of axes retained in the Principal Component Analysis (PCA) step
choose.n.clust=FALSE, #The number of clusters shouldn't be chosen by the user
max.n.clust=maxK) #Maximum number of clusters to be tried, in this case is 10
myMat[i,]<-grp$Kstat #Integrate the BIC statistics values of each K to the matrix
}
my_df<-melt(myMat) #Transform matrix to an object molten data frame
colnames(my_df)[1:3]<-c("Group", "K", "BIC") #Name columns
my_df$K<-as.factor(my_df$K) #Transform K to factor
(Sg.K_BIC<-ggplot(my_df,aes(x=K, y=BIC))+ #Axis definition
geom_boxplot(aes(colour = K))+ #Geometry definition
theme_bw()+ #Canvas definition
xlab("Number of groups (K)")+ #x-axis legend
theme(legend.position="none")) #Hide legend box
maxK<-10 #The number of K to be tested is established
myMat<-matrix(nrow=10,ncol=maxK) #Create the matrix establishing the number of rows and columns
colnames(myMat)<-1:ncol(myMat) #Give names to the columns depending on the number of each K
for(i in 1:nrow(myMat)){ #Enumerate each row
#find.clusters parameters
grp<-find.clusters(Sg.gen, #Data base
n.pca=30, #Number of axes retained in the Principal Component Analysis (PCA) step
choose.n.clust=FALSE, #The number of clusters shouldn't be chosen by the user
max.n.clust=maxK) #Maximum number of clusters to be tried, in this case is 10
myMat[i,]<-grp$Kstat #Integrate the BIC statistics values of each K to the matrix
}
my_df<-melt(myMat) #Transform matrix to an object molten data frame
colnames(my_df)[1:3]<-c("Group", "K", "BIC") #Name columns
my_df$K<-as.factor(my_df$K) #Transform K to factor
(Sg.K_BIC<-ggplot(my_df,aes(x=K, y=BIC))+ #Axis definition
geom_boxplot(aes(colour = K))+ #Geometry definition
theme_bw()+ #Canvas definition
xlab("Number of groups (K)")+ #x-axis legend
theme(legend.position="none")) #Hide legend box
#find.clusters parameters
grp<-find.clusters(Sg.gen, #Data base
n.pca=20, #Number of axes retained in the Principal Component Analysis (PCA) step
choose.n.clust=FALSE, #The number of clusters shouldn't be chosen by the user
max.n.clust=maxK) #Maximum number of clusters to be tried, in this case is 10
myMat<-matrix(nrow=10,ncol=maxK) #Create the matrix establishing the number of rows and columns
colnames(myMat)<-1:ncol(myMat) #Give names to the columns depending on the number of each K
for(i in 1:nrow(myMat)){ #Enumerate each row
#find.clusters parameters
grp<-find.clusters(Sg.gen, #Data base
n.pca=20, #Number of axes retained in the Principal Component Analysis (PCA) step
choose.n.clust=FALSE, #The number of clusters shouldn't be chosen by the user
max.n.clust=maxK) #Maximum number of clusters to be tried, in this case is 10
myMat[i,]<-grp$Kstat #Integrate the BIC statistics values of each K to the matrix
}
my_df<-melt(myMat) #Transform matrix to an object molten data frame
colnames(my_df)[1:3]<-c("Group", "K", "BIC") #Name columns
my_df$K<-as.factor(my_df$K) #Transform K to factor
(Sg.K_BIC<-ggplot(my_df,aes(x=K, y=BIC))+ #Axis definition
geom_boxplot(aes(colour = K))+ #Geometry definition
theme_bw()+ #Canvas definition
xlab("Number of groups (K)")+ #x-axis legend
theme(legend.position="none")) #Hide legend box
myMat<-matrix(nrow=10,ncol=maxK) #Create the matrix establishing the number of rows and columns
colnames(myMat)<-1:ncol(myMat) #Give names to the columns depending on the number of each K
for(i in 1:nrow(myMat)){ #Enumerate each row
#find.clusters parameters
grp<-find.clusters(Sg.gen, #Data base
n.pca=25, #Number of axes retained in the Principal Component Analysis (PCA) step
choose.n.clust=FALSE, #The number of clusters shouldn't be chosen by the user
max.n.clust=maxK) #Maximum number of clusters to be tried, in this case is 10
myMat[i,]<-grp$Kstat #Integrate the BIC statistics values of each K to the matrix
}
my_df<-melt(myMat) #Transform matrix to an object molten data frame
colnames(my_df)[1:3]<-c("Group", "K", "BIC") #Name columns
my_df$K<-as.factor(my_df$K) #Transform K to factor
(Sg.K_BIC<-ggplot(my_df,aes(x=K, y=BIC))+ #Axis definition
geom_boxplot(aes(colour = K))+ #Geometry definition
theme_bw()+ #Canvas definition
xlab("Number of groups (K)")+ #x-axis legend
theme(legend.position="none")) #Hide legend box
ggsave("Analysis/Clusters_DAPC/Figures/Sg.K_BIC.pdf",dpi=300,limitsize=TRUE,
width=10,height=7)
#Combination of mapping database with ID database.
Sg.grp<-cbind(grp$grp,Sg.data$ind)
#Name columns
colnames(Sg.grp)[1:2]<-c("K","ID")
Sg.grp
#Combination of mapping database with ID database.
Sg.grp<-cbind(grp$grp,Sg.data$ind)
#Name columns
colnames(Sg.grp)[1:2]<-c("K","ID")
#Combination of mapping database with ID database.
Sg.grp<-as.data.frame(cbind(grp$grp,Sg.data$ind))
#Name columns
colnames(Sg.grp)[1:2]<-c("K","ID")
Sg.grp
#Combination of mapping database with ID database.
Sg.grp<-(grp$grp,Sg.data$ind)
#Combination of mapping database with ID database.
Sg.grp<-cbind(grp$grp,Sg.data$ind)
(Sg.asig<-ggplot(Sg.grp,aes(x=ID, y=K))+ #Axis definition
geom_point(aes(colour = K))+  #Geometry definition
scale_color_brewer(palette="Dark2")+ #Scale color
facet_grid(~K,scales="free_x")+ #Panels division for each K within individuals
theme_bw()+ #Canvas definition
theme(axis.text.x=element_text(size=7.5,angle=90,hjust=0), #Size and position of axis.text.x
axis.text.y=element_text(size=8), #Size of axis.text.x
legend.position="none", #Remove legend
strip.text.x=element_text(size=0), #Remove numbers of k
axis.title.x=element_blank(), #Remove title of axis x
strip.background=element_blank())) #Remove rectangle
Sg.grp
Sg.data
grp
grp$grp
Sg.grp
#Combination of mapping database with ID database.
Sg.grp<-rbind(grp$grp,Sg.data$ind)
Sg.grp
#Combination of mapping database with ID database.
Sg.grp<-cbind(grp$grp,Sg.data$ind)
Sg.grp
grp$grp
#Combination of mapping database with ID database.
grp<-as.data.frame(grp$grp)
grp
Sg.grp<-cbind(grp$grp,Sg.data$ind)
Sg.grp
#Combination of mapping database with ID database.
Sg.grp<-cbind(grp$grp,Sg.data$ind)
Sg.grp
#ID and location database information
Sg.data<-read.table("Data/Pop_Info/Pops.txt",sep="\t",header=T)
#SNPs database
Sg.vcf<-read.vcfR("Data/Loci_Data/Sg_Pols2M_7000snps.vcf")
#Transform SNPs database to genind object
Sg.gen<-vcfR2genind(Sg.vcf)
#Definition of localities as populations (for now)
pop(Sg.gen)<-Sg.data$loc
Sg.data$ind
#Combination of mapping database with ID database.
Sg.grp<-cbind(grp$grp,Sg.data$id)
Sg.grp
#Name columns
colnames(Sg.grp)[1:2]<-c("K","ID")
#Transform of database to data.frame
Sg.grp<-as.data.frame(Sg.grp)
Sg.grp
#Name columns
colnames(Sg.grp)[1:2]<-c("K","ID")
(Sg.asig<-ggplot(Sg.grp,aes(x=ID, y=K))+ #Axis definition
geom_point(aes(colour = K))+  #Geometry definition
scale_color_brewer(palette="Dark2")+ #Scale color
facet_grid(~K,scales="free_x")+ #Panels division for each K within individuals
theme_bw()+ #Canvas definition
theme(axis.text.x=element_text(size=7.5,angle=90,hjust=0), #Size and position of axis.text.x
axis.text.y=element_text(size=8), #Size of axis.text.x
legend.position="none", #Remove legend
strip.text.x=element_text(size=0), #Remove numbers of k
axis.title.x=element_blank(), #Remove title of axis x
strip.background=element_blank())) #Remove rectangle
colnames
my_df$K
my_df$K<-as.factor(my_df$K)
grp$grp
my_df
my_df$K
my_df$K
pdf("Analysis/Clusters_DAPC/Figures/Sg.xval.pdf",width = 10, height=7,
bg = "white",colormodel = "cmyk")
(Sg.xval<-xvalDapc(tab(Sg.gen, #Data base
NA.method="mean"), #Change Na to mean
pop(Sg.gen), #Populations
n.pca.max=40, #Maximum number of PCA components to retain.
training.set=0.9, #Proportion of data (individuals) to be used for the training set
result="groupMean", #Group-wise assignment success
center=FALSE, #Variables shouldn't be centered to mean
scale=FALSE, #Variables shouldn't be scaled
n.rep=300, #Number of replicates to be carried out at each level of PC retention
n.pca=NULL, #Number of PCs determined automatically.
parallel="multicore", #R parallel system
ncpus=4L)) #Number of cores you want to use
grp
myMat
grp$Kstat
(Sg.xval<-xvalDapc(tab(Sg.gen, #Data base
NA.method="mean"), #Change Na to mean
pop(Sg.gen), #Populations
n.pca.max=40, #Maximum number of PCA components to retain.
training.set=0.9, #Proportion of data (individuals) to be used for the training set
result="groupMean", #Group-wise assignment success
center=FALSE, #Variables shouldn't be centered to mean
scale=FALSE, #Variables shouldn't be scaled
n.rep=300, #Number of replicates to be carried out at each level of PC retention
n.pca=NULL, #Number of PCs determined automatically.
parallel="multicore", #R parallel system
ncpus=2L)) #Number of cores you want to use
Sg.xval$DAPC
Sg.xval$`Number of PCs Achieving Highest Mean Success`
Sg.xval$`Number of PCs Achieving Highest Mean Success`
Sg.xval$`Root Mean Squared Error by Number of PCs of PCA`
Sg.dapc<-dapc(Sg.gen, #Data base
pop(Sg.gen), #Populations
n.pca=10, #Number of axes retained in the Principal Component Analysis (PCA) step
n.da=3, #Number of axes retained in the Discriminant Analysis step
center=FALSE, #Variables shouldn't be centered to mean
scale=FALSE) #Variables shouldn't be scaled
#Obtain and transform to a data frame the individual coordinates of the linear discriminants of the DPCA
Sg.ind.coord<-as.data.frame(Sg.dapc$ind.coord)
#Obtain and transform the sampling sites into factors
Sg.sites<-as.factor(Sg.data$loc)
#Join both databases
Sg.scatter<-cbind(Sg.ind.coord,Sg.sites)
#Rename the columns
colnames(Sg.scatter)[1:4]<-c("LD1","LD2","LD3","Sites")
#Plot DPCA
(Sg.ggscatter<-ggscatter(Sg.scatter,x="LD1",y="LD2",col="Sites", #Axis and color definition
ellipse=TRUE, #Add ellipse
mean.point=F, #Remove mean point
star.plot=TRUE)+ #Add lines in points
scale_color_brewer(palette="Dark2")+ #Color palette
geom_hline(yintercept=0,linetype="dashed",color="black",size=0.5)+ #Add line in y-axis
geom_vline(xintercept=0,linetype="dashed",color="black",size=0.5)+ #Add line in x-axis
theme_bw()) #Canvas definition
#Plot DPCA
(Sg.ggscatter<-ggscatter(Sg.scatter,x="LD1",y="LD2",col="Sites", #Axis and color definition
ellipse=TRUE, #Add ellipse
mean.point=FALSE, #Remove mean point
star.plot=F)+ #Add lines in points
scale_color_brewer(palette="Dark2")+ #Color palette
geom_hline(yintercept=0,linetype="dashed",color="black",size=0.5)+ #Add line in y-axis
geom_vline(xintercept=0,linetype="dashed",color="black",size=0.5)+ #Add line in x-axis
theme_bw()) #Canvas definition
TRUE
#Plot DPCA
(Sg.ggscatter<-ggscatter(Sg.scatter,x="LD1",y="LD2",col="Sites", #Axis and color definition
ellipse=TRUE, #Add ellipse
mean.point=FALSE, #Remove mean point
star.plot=TRUE)+ #Add lines in points
scale_color_brewer(palette="Dark2")+ #Color palette
geom_hline(yintercept=0,linetype="dashed",color="black",size=0.5)+ #Add line in y-axis
geom_vline(xintercept=0,linetype="dashed",color="black",size=0.5)+ #Add line in x-axis
theme_bw()) #Canvas definition
ggsave("Analysis/Clusters_DAPC/Figures/Sg.ggscatter.pdf",dpi=300,limitsize=TRUE,
width=10,height=7)
assignplot(Sg.dapc)
compoplot(C.datos.dapc,col=rainbow(14))
compoplot(Sg.dapc,col=rainbow(14))
assignplot(Sg.dapc)
compoplot(Sg.dapc,col=rainbow(14))
compoplot(Sg.dapc,col=rainbow(14),posi=list(x=0,y=1.2))
compoplot(Sg.dapc,col=rainbow(14),posi=list(x=0,y=1))
Assig.plot<-compoplot(Sg.dapc,col=rainbow(14))
pdf("Analysis/Clusters_DAPC/Figures/Assig.plot.pdf",width = 10, height=7,
bg = "white",colormodel = "cmyk")
Assig.plot<-compoplot(Sg.dapc,col=rainbow(14))
dev.off()
pdf("Analysis/Clusters_DAPC/Figures/Assig.plot.pdf",width = 10, height=7,
bg = "white",colormodel = "cmyk")
pdf("Analysis/Clusters_DAPC/Figures/Assig.plot.pdf",width = 10, height=7,
bg = "white",colormodel = "cmyk")
Assig.plot<-compoplot(Sg.dapc,col=rainbow(14))
dev.off()
![](/Analysis/Env_Vars/Figures/Sg.lancov.pdf)
![](/Analysis/Env_Vars/Figures/RH.png)
